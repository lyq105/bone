load "iovtk"
// Define parameters

real B = 1.0;
real C = 100;
real ka = 0.25e3;
real gamma = 2;
real rhoinit = 0.8e3;
real rho0 = 0.01e3;
real rhocb = 1.74e3;
real possionratio = 0.3;
real ediv = 20;
real squarelenth = 0.1;
real toppres = 1e7;
real objerror = 1e-3;

//Define the mesh and finite element space

mesh Th=square(ediv,ediv,[squarelenth*x,squarelenth*y]);
//plot(Th);
fespace Vh(Th,P2);
fespace Wh(Th,P0);
Vh u,v,uu,vv;
Wh rho = rhoinit; // Bone's density function is in P0 finite element space;
Wh E = C*rho^gamma;   // Young's Modulus is in P0 finite elemnt space;

// define some macros 
macro strain(u,v)[dx(u),dy(v),dy(u)+dx(v)]//
macro D(E,nu)
 [[E/(1-nu^2),E*nu/(1-nu^2),0],
  [E*nu/(1-nu^2),E/(1-nu^2),0],
  [0,0,E/(2*(1+nu))]]// Plane stress elastic matrix
//macro D(E,nu)
// [[E*(1-nu)/((1-nu)*(1-2*nu)),E*nu/((1-nu)*(1-2*nu)),0],
//  [E*nu/((1-nu)*(1-2*nu)),E*(1-nu)/((1-nu)*(1-2*nu)),0],
//  [0,0,E/(2*(1+nu))]]// Plane strain elastic matrix

func top=-toppres/squarelenth*x*(1+y)/(1+y) + toppres;
Vh g2 =top;
problem elasticity([u,v],[uu,vv])=int2d(Th)(strain(u,v)'*D(E,possionratio)*strain(uu,vv))+int1d(Th,3)(g2*vv)+on(1,u=0,v=0);

ofstream ff("objvalue.dat");
for (int t = 0; t<100;t++)
{
	elasticity;
	Wh sed = 0.5*strain(u,v)'*D(E,possionratio)*strain(u,v);
	rho = rho + B*(sed/rho -ka);
	cout <<"max & min is "<< rho[].max << "&" << rho[].min<<endl;
	Wh obj2=0;
	int number=0;
	for (int ri=0;ri<rho.n;ri++)
	{
		if (rho[](ri)>=rhocb) rho[](ri)=rhocb;
		if (rho[](ri)<=rho0) rho[](ri)=rho0;
		if (rho[](ri)<rhocb && rho[](ri)>rho0) 
		{
			obj2[](ri)=abs(sed[](ri)/rho[](ri)-ka);
			number++;
		}
	}
	E = C*rho^gamma;
	//Wh obj = abs(sed/rho-ka);
	
	ff << t <<" " 
		 //<< obj[].sum/obj.n << " "
		 << obj2[].sum/obj2.n << " "
		 << number << " "
	   << endl;
	cout << obj2[].sum/obj2.n << " " 
		   << number << "/" << Th.nt <<endl;
	if (obj2[].sum/obj2.n < objerror) break;
}

//mesh th;
//th =movemesh(Th,[x+u,y+v]);
//plot(th);

plot(rho,fill=1,ps="rho.eps");
savevtk("rho.vtk",Th,rho,dataname="rho");


// Export to tecplot
ofstream tec("rho.plt");

tec << "TITLE = \"Bone density\""   << endl;
tec << "VARIABLES = \"X\", \"Y\", \"rho\"" << endl;
tec << "ZONE ZONETYPE = FETRIANGLE"
    << ",NODES = "<< Th.nv 
    << ",ELEMENTS = "<< Th.nt
    << ",DATAPACKING = BLOCK"
    << ",VARLOCATION = ([3]=CELLCENTERED)" << endl;

for (int i = 0;i< Th.nv;i++)
{
	tec << Th(i).x << "  ";
	if (i%10==0) tec<< endl;
}
tec << endl;
for (int i = 0;i< Th.nv;i++)
{
	tec << Th(i).y << "  ";
	if (i%10==0) tec<< endl;
}
tec << endl;
for (int i = 0;i< Th.nt;i++)
{
	tec << rho[][i] << "  ";
	if (i%10==0) tec<< endl;
}
tec << endl;
for (int i = 0; i < Th.nt; i++)
{
	tec << Th[i][0] + 1<< " "
		  << Th[i][1] + 1<< " "
      << Th[i][2] + 1<< endl;
}
cout << rho[].n <<endl;
